using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

public class ActionController : MonoBehaviour, IPointerClickHandler
{
    //Данный скрипт предназначен для фиксации клика по активному блоку, выполнения действий, связанных с кликом,
    //оглашения событий, которые провоцирует активный блок в результате определенных событий, в нашес сл - клика
    //хочу заметить, что данный скрипт тесно связан со своей анимацией, ибо события которые он провоцирует
    //озвучиваются после окончания анимации, за что отвечает специальная функция

    //Самым главным событием, которое может спровоцировать блок является его инициализация
    //Заметим что синтаксис имени любого блока такой (части разделяются подчеркиванием _ , а все буквы прописные):
    //ТИП: А - активный (взаимодействует с пользователем),
    //Е - не активный (собирает события с активных блоков и др элементов игры)
    //S - вызов системного события, например проигрыш, выигрыш, приз и тп.
    //ДАЛЕЕ: Имя фигуры из которой основан блок
    //далее: порядковый номер
    //Нпример: A_CUBE_1 или E_RECT_1
    //основное событие всегда дописывается в конец масссива

    [Header("События которые создает блок")]
    //Список событий, которые оглашает активный блок, после его активации
    public string[] MyActions;

    //Список событий на которые может быть подписан активный блок - заметь это не реализовано!
    //public string[] MyEvents;

    [Header("Число на блоке")]
    //Так как активный блок представляет из себя кликабельный элемент с надписью
    //содержащей текст, то это как раз этот текст
    public float Labele;

    public void OnPointerClick(PointerEventData eventData)
    {
        //Озвучиваем событие клика по ЦИФРОВОМУ КУБУ
        MyEventAgregator.World.PublichEvent("NUMBER_CUBE_IS_OPEN");

        //Сдесь мы просто фиксируем клик и запускаем анимацию
        GetComponent<Animator>().enabled = true;
    }

    public void AnimationEvent()
    {
        //Функция вызывается по завершении анимации
        //По завершении анимации озвучиваем события которые провоцирует блок, в качестве второго ааргумента передается число на активном блоке
        for (int i = 0; i < MyActions.Length; i++)
        {
            MyEventAgregator.World.PublichEvent(MyActions[i].ToString(), Labele);
        }
    }
}
